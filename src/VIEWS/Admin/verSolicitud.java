/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package VIEWS.Admin;

import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import MODELS.DatabaseConnection;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;

/**
 *
 * @author GerardRG
 */
public class verSolicitud extends javax.swing.JPanel {

    private DefaultTableModel modelo;
    private javax.swing.JTextArea txtDescripcion;
    /**
     * Creates new form verSolicitud
     */
    public verSolicitud() {
        initComponents();
        inicializarTabla();
        cargarDatos();
        
    txtDescripcion = new javax.swing.JTextArea();
    txtDescripcion.setColumns(20);
    txtDescripcion.setRows(5);
    txtDescripcion.setEditable(false);
    SCPInformacion.setViewportView(txtDescripcion);
    }
    
    private void inicializarTabla() {
    modelo = new DefaultTableModel();
    String[] columnas = {
        "ID", "Fecha Registro", "Descripción", "Cliente",
        "Categoría", "Prioridad", "Estado", "Asignado A"
    };
    modelo.setColumnIdentifiers(columnas);
    jTable1.setModel(modelo);

    // Inicializar el combo correctamente
    CMBcategorias.setModel(new javax.swing.DefaultComboBoxModel<>(
        new String[] { "Todos", "Acceso", "Rendimiento", "Errores", "Consultas" }
    ));
}

    private void cargarDatos() {
    cargarDatos(0); // 0 = todos
}
    private void cargarDatos(int filtroCategoria) {
    Connection con = DatabaseConnection.getConnection();
    if (con == null) {
        JOptionPane.showMessageDialog(this, "No se pudo conectar a la BD");
        return;
    }

    String sql = "SELECT id, fecha_registro, descripcion, cliente_nombre, "
               + "categoria_id, prioridad_id, estado_id, asignado_a_id "
               + "FROM public.solicitudes";

    // Si se selecciona una categoría específica, agregar filtro
    if (filtroCategoria > 0) {
        sql += " WHERE categoria_id = " + filtroCategoria;
    }

    try (PreparedStatement ps = con.prepareStatement(sql);
         ResultSet rs = ps.executeQuery()) {

        modelo.setRowCount(0);

        while (rs.next()) {
            // Mapear valores de categoria
            String categoria = switch (rs.getInt("categoria_id")) {
                case 1 -> "Acceso";
                case 2 -> "Rendimiento";
                case 3 -> "Errores";
                case 4 -> "Consultas";
                default -> "Desconocida";
            };

            // Mapear valores de prioridad
            String prioridad = switch (rs.getInt("prioridad_id")) {
                case 1 -> "Baja";
                case 2 -> "Media";
                case 3 -> "Alta";
                default -> "Desconocida";
            };

            // Mapear valores de estado
            String estado = switch (rs.getInt("estado_id")) {
                case 1 -> "Abierta";
                case 2 -> "En Progreso";
                case 3 -> "Cerrada";
                default -> "Desconocido";
            };

            Object[] fila = {
                rs.getInt("id"),
                rs.getTimestamp("fecha_registro"),
                rs.getString("descripcion"),
                rs.getString("cliente_nombre"),
                categoria,
                prioridad,
                estado,
                rs.getInt("asignado_a_id")
            };
            modelo.addRow(fila);
        }

    } catch (SQLException e) {
        JOptionPane.showMessageDialog(this, "Error al cargar datos: " + e.getMessage());
    } finally {
        DatabaseConnection.closeConnection(con);
    }
}

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        btnCerrar = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jLabel9 = new javax.swing.JLabel();
        txtBuscar = new javax.swing.JTextField();
        btnBuscar = new javax.swing.JButton();
        btnVerSolicitud = new javax.swing.JButton();
        CMBcategorias = new javax.swing.JComboBox<>();
        jLabel2 = new javax.swing.JLabel();
        SCPInformacion = new javax.swing.JScrollPane();

        jLabel1.setFont(new java.awt.Font("sansserif", 0, 18)); // NOI18N
        jLabel1.setText("Información de solicitudes");

        jLabel7.setFont(new java.awt.Font("sansserif", 0, 14)); // NOI18N
        jLabel7.setText("Descripcion");

        btnCerrar.setText("Cerrar");
        btnCerrar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCerrarActionPerformed(evt);
            }
        });

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null}
            },
            new String [] {
                "ID", "Fecha Registro", "Descripción", "Nombre", "Categoria ", "Prioridad", "Estado", "Asignado"
            }
        ));
        jScrollPane1.setViewportView(jTable1);

        jLabel9.setText("Bucar ID");

        btnBuscar.setText("Buscar");
        btnBuscar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBuscarActionPerformed(evt);
            }
        });

        btnVerSolicitud.setText("Ver");
        btnVerSolicitud.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnVerSolicitudActionPerformed(evt);
            }
        });

        CMBcategorias.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        CMBcategorias.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CMBcategoriasActionPerformed(evt);
            }
        });

        jLabel2.setText("Ordenar por categorias");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(317, 317, 317)
                        .addComponent(jLabel1))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(25, 25, 25)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel7)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 850, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel9)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(txtBuscar, javax.swing.GroupLayout.PREFERRED_SIZE, 141, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(btnBuscar)
                                .addGap(61, 61, 61)
                                .addComponent(jLabel2)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(CMBcategorias, javax.swing.GroupLayout.PREFERRED_SIZE, 131, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(SCPInformacion, javax.swing.GroupLayout.PREFERRED_SIZE, 842, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(211, 211, 211)
                        .addComponent(btnCerrar, javax.swing.GroupLayout.PREFERRED_SIZE, 108, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(202, 202, 202)
                        .addComponent(btnVerSolicitud, javax.swing.GroupLayout.PREFERRED_SIZE, 94, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(25, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addGap(25, 25, 25)
                .addComponent(jLabel9)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtBuscar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnBuscar)
                    .addComponent(CMBcategorias, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2))
                .addGap(5, 5, 5)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 161, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(27, 27, 27)
                .addComponent(jLabel7)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(SCPInformacion, javax.swing.GroupLayout.PREFERRED_SIZE, 199, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 15, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnCerrar)
                    .addComponent(btnVerSolicitud))
                .addGap(35, 35, 35))
        );
    }// </editor-fold>//GEN-END:initComponents


    private void btnBuscarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBuscarActionPerformed
        String idBuscar = txtBuscar.getText().trim();

        if (idBuscar.isEmpty()) {
            cargarDatos();
            txtDescripcion.setText("");
            return;
        }

        Connection con = DatabaseConnection.getConnection();
        if (con == null) {
            JOptionPane.showMessageDialog(this, "No se pudo conectar a la BD");
            return;
        }

        String sql = "SELECT id, fecha_registro, descripcion, cliente_nombre, " +
                     "categoria_id, prioridad_id, estado_id, asignado_a_id " +
                     "FROM public.solicitudes WHERE id = ?";

        try (PreparedStatement ps = con.prepareStatement(sql)) {
            ps.setInt(1, Integer.parseInt(idBuscar));
            try (ResultSet rs = ps.executeQuery()) {
                modelo.setRowCount(0); 

                if (rs.next()) {
                    String categoria = switch (rs.getInt("categoria_id")) {
                        case 1 -> "Acceso";
                        case 2 -> "Rendimiento";
                        case 3 -> "Errores";
                        case 4 -> "Consultas";
                        default -> "Desconocida";
                    };

                    String prioridad = switch (rs.getInt("prioridad_id")) {
                        case 1 -> "Baja";
                        case 2 -> "Media";
                        case 3 -> "Alta";
                        default -> "Desconocida";
                    };

                    String estado = switch (rs.getInt("estado_id")) {
                        case 1 -> "Abierta";
                        case 2 -> "En Progreso";
                        case 3 -> "Cerrada";
                        default -> "Desconocido";
                    };

                    Object[] fila = {
                        rs.getInt("id"),
                        rs.getTimestamp("fecha_registro"),
                        rs.getString("descripcion"),
                        rs.getString("cliente_nombre"),
                        categoria,
                        prioridad,
                        estado,
                        rs.getInt("asignado_a_id")
                    };
                    modelo.addRow(fila);

                    // Mostrar en cascada
                    txtDescripcion.setText(
                        "ID: " + rs.getInt("id") + "\n" +
                        "Fecha: " + rs.getTimestamp("fecha_registro") + "\n" +
                        "Cliente: " + rs.getString("cliente_nombre") + "\n" +
                        "Categoría: " + categoria + "\n" +
                        "Prioridad: " + prioridad + "\n" +
                        "Estado: " + estado + "\n" +
                        "Asignado a: " + rs.getInt("asignado_a_id") + "\n\n" +
                        "Descripción:\n" + rs.getString("descripcion")
                    );
                } else {
                    JOptionPane.showMessageDialog(this, "No se encontró el ID ingresado");
                    txtDescripcion.setText("");
                }
            }
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(this, "Error en búsqueda: " + e.getMessage());
        } finally {
            DatabaseConnection.closeConnection(con);
        }
    }//GEN-LAST:event_btnBuscarActionPerformed

    private void btnCerrarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCerrarActionPerformed
       javax.swing.SwingUtilities.getWindowAncestor(this).dispose();
    }//GEN-LAST:event_btnCerrarActionPerformed

    private void btnVerSolicitudActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnVerSolicitudActionPerformed
      int fila = jTable1.getSelectedRow();
        if (fila == -1) {
            JOptionPane.showMessageDialog(this, "Debe seleccionar una solicitud");
            return;
        }

        // Obtener el ID de la solicitud seleccionada
        int idSolicitud = (int) modelo.getValueAt(fila, 0);

        Connection con = DatabaseConnection.getConnection();
        if (con == null) {
            JOptionPane.showMessageDialog(this, "No se pudo conectar a la BD");
            return;
        }

        String sql = "SELECT id, fecha_registro, descripcion, cliente_nombre, "
                   + "categoria_id, prioridad_id, estado_id, asignado_a_id "
                   + "FROM public.solicitudes WHERE id = ?";

        try (PreparedStatement ps = con.prepareStatement(sql)) {
            ps.setInt(1, idSolicitud);
            ResultSet rs = ps.executeQuery();

            if (rs.next()) {
                String categoria;
                switch (rs.getInt("categoria_id")) {
                    case 1 -> categoria = "Acceso";
                    case 2 -> categoria = "Rendimiento";
                    case 3 -> categoria = "Errores";
                    case 4 -> categoria = "Consultas";
                    default -> categoria = "Desconocido";
                }

                String prioridad;
                switch (rs.getInt("prioridad_id")) {
                    case 1 -> prioridad = "Baja";
                    case 2 -> prioridad = "Media";
                    case 3 -> prioridad = "Alta";
                    default -> prioridad = "Desconocida";
                }

                String estado;
                switch (rs.getInt("estado_id")) {
                    case 1 -> estado = "Abierta";
                    case 2 -> estado = "En progreso";
                    case 3 -> estado = "Cerrada";
                    default -> estado = "Desconocido";
                }

                // Mostrar en cascada dentro del JTextArea
                txtDescripcion.setText(
                    "ID: " + rs.getInt("id") + "\n" +
                    "Fecha de registro: " + rs.getTimestamp("fecha_registro") + "\n" +
                    "Cliente: " + rs.getString("cliente_nombre") + "\n" +
                    "Categoría: " + categoria + "\n" +
                    "Prioridad: " + prioridad + "\n" +
                    "Estado: " + estado + "\n" +
                    "Asignado a: " + rs.getInt("asignado_a_id") + "\n\n" +
                    "Descripción:\n" + rs.getString("descripcion")
                );
            }

        } catch (SQLException e) {
            JOptionPane.showMessageDialog(this, "Error al cargar solicitud: " + e.getMessage());
        } finally {
            DatabaseConnection.closeConnection(con);
        }
    }//GEN-LAST:event_btnVerSolicitudActionPerformed

    private void CMBcategoriasActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CMBcategoriasActionPerformed
     int index = CMBcategorias.getSelectedIndex();
    // index coincide con los valores del combo (0=Todos, 1=Acceso, 2=Rendimiento, 3=Errores, 4=Consultas)
    cargarDatos(index);
    }//GEN-LAST:event_CMBcategoriasActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox<String> CMBcategorias;
    private javax.swing.JScrollPane SCPInformacion;
    private javax.swing.JButton btnBuscar;
    private javax.swing.JButton btnCerrar;
    private javax.swing.JButton btnVerSolicitud;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    private javax.swing.JTextField txtBuscar;
    // End of variables declaration//GEN-END:variables
}
